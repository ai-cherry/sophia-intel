version: '3.8'

services:
  # MCP Server - Lambda Labs Management
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: sophia-mcp-server
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - LAMBDA_API_KEY=${LAMBDA_API_KEY}
      - MCP_AUTH_TOKEN=${MCP_AUTH_TOKEN}
      - LAMBDA_SERVERS_JSON=${LAMBDA_SERVERS_JSON}
      - LOG_LEVEL=info
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # Orchestrator - Core AI Orchestration
  orchestrator:
    build:
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: sophia-orchestrator
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/sophia_intel
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - LAMBDA_PRIMARY_URL=${LAMBDA_PRIMARY_URL}
      - LAMBDA_SECONDARY_URL=${LAMBDA_SECONDARY_URL}
      - MCP_BASE_URL=http://mcp-server:8001
    depends_on:
      - mcp-server
      - postgres
      - redis
      - qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # API Gateway - Request Routing & Rate Limiting
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile
    container_name: sophia-api-gateway
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - MCP_BASE_URL=http://mcp-server:8001
      - RATE_LIMIT_REQUESTS_PER_MINUTE=${RATE_LIMIT_REQUESTS_PER_MINUTE:-100}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    depends_on:
      - orchestrator
      - mcp-server
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # Monitoring Dashboard
  dashboard:
    build:
      context: ./monitoring
      dockerfile: Dockerfile
    container_name: sophia-dashboard
    ports:
      - "8090:8090"
    environment:
      - ENVIRONMENT=production
      - MCP_BASE_URL=http://mcp-server:8001
      - ORCHESTRATOR_URL=http://orchestrator:8000
      - API_GATEWAY_URL=http://api-gateway:8080
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/sophia_intel
      - QDRANT_URL=http://qdrant:6333
      - LAMBDA_PRIMARY_URL=${LAMBDA_PRIMARY_URL}
      - LAMBDA_SECONDARY_URL=${LAMBDA_SECONDARY_URL}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
    depends_on:
      - mcp-server
      - orchestrator
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sophia-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sophia_intel
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sophia-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: sophia-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: sophia-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-sophia-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-sophia-secret-2024}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sophia-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sophia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sophia-network

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sophia-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-sophia-admin-2024}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - sophia-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sophia-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - dashboard
      - orchestrator
      - grafana
    restart: unless-stopped
    networks:
      - sophia-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sophia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

