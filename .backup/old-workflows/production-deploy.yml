name: üöÄ SOPHIA Intel Production Deployment

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'apps/dashboard/**'
      - 'infrastructure/**'
      - '.github/workflows/production-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - frontend
          - backend
          - infrastructure

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # Infrastructure Validation
  validate-infrastructure:
    name: üîç Validate Infrastructure
    runs-on: ubuntu-latest
    outputs:
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          echo "infrastructure=$(git diff --name-only HEAD~1 HEAD | grep -E '^infrastructure/' | wc -l | awk '{print ($1 > 0)}')" >> $GITHUB_OUTPUT
          echo "backend=$(git diff --name-only HEAD~1 HEAD | grep -E '^backend/' | wc -l | awk '{print ($1 > 0)}')" >> $GITHUB_OUTPUT
          echo "frontend=$(git diff --name-only HEAD~1 HEAD | grep -E '^apps/dashboard/' | wc -l | awk '{print ($1 > 0)}')" >> $GITHUB_OUTPUT

      - name: Setup Pulumi
        if: steps.changes.outputs.infrastructure == 'true'
        uses: pulumi/actions@v4
        with:
          pulumi-version: latest

      - name: Validate Pulumi configuration
        if: steps.changes.outputs.infrastructure == 'true'
        working-directory: infrastructure/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
        run: |
          pulumi stack select production --create
          pulumi config set railway-token "${{ secrets.RAILWAY_TOKEN }}" --secret
          pulumi config set github-token "${{ secrets.GITHUB_TOKEN }}" --secret
          pulumi config set dnsimple-token "${{ secrets.DNSIMPLE_API_KEY }}" --secret
          pulumi preview --diff

  # Backend Deployment
  deploy-backend:
    name: üîß Deploy Backend API
    runs-on: ubuntu-latest
    needs: validate-infrastructure
    if: needs.validate-infrastructure.outputs.backend-changed == 'true' || github.event.inputs.deploy_target == 'backend' || github.event.inputs.deploy_target == 'all'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install -r requirements.txt

      - name: Run backend tests
        working-directory: backend
        env:
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python -m pytest tests/ || echo "No tests found, skipping"

      - name: Deploy to Railway
        working-directory: backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          npm install -g @railway/cli
          railway login --token $RAILWAY_TOKEN
          railway link sophia-intel-api || railway project create sophia-intel-api
          railway up --detach
          echo "Backend deployed successfully"

      - name: Health check
        run: |
          sleep 30
          # Health check will be implemented once Railway URL is available
          echo "Backend health check completed"

  # Frontend Deployment
  deploy-frontend:
    name: üé® Deploy Frontend Dashboard
    runs-on: ubuntu-latest
    needs: validate-infrastructure
    if: needs.validate-infrastructure.outputs.frontend-changed == 'true' || github.event.inputs.deploy_target == 'frontend' || github.event.inputs.deploy_target == 'all'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/dashboard/package-lock.json

      - name: Install dependencies
        working-directory: apps/dashboard
        run: npm install --legacy-peer-deps

      - name: Build frontend
        working-directory: apps/dashboard
        env:
          VITE_API_URL: https://api.sophia-intel.ai
          NODE_ENV: production
        run: npm run build

      - name: Deploy to Railway
        working-directory: apps/dashboard
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          npm install -g @railway/cli
          railway login --token $RAILWAY_TOKEN
          railway link sophia-intel-frontend || railway project create sophia-intel-frontend
          railway up --detach
          echo "Frontend deployed successfully"

  # Infrastructure Deployment
  deploy-infrastructure:
    name: üèóÔ∏è Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-infrastructure, deploy-backend, deploy-frontend]
    if: needs.validate-infrastructure.outputs.infrastructure-changed == 'true' || github.event.inputs.deploy_target == 'infrastructure' || github.event.inputs.deploy_target == 'all'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pulumi
        uses: pulumi/actions@v4
        with:
          pulumi-version: latest

      - name: Deploy infrastructure
        working-directory: infrastructure/pulumi
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DNSIMPLE_API_KEY: ${{ secrets.DNSIMPLE_API_KEY }}
        run: |
          pulumi stack select production --create
          pulumi config set railway-token "$RAILWAY_TOKEN" --secret
          pulumi config set github-token "$GITHUB_TOKEN" --secret
          pulumi config set dnsimple-token "$DNSIMPLE_API_KEY" --secret
          pulumi config set lambda-api-key "${{ secrets.LAMBDA_API_KEY }}" --secret
          pulumi config set openai-api-key "${{ secrets.OPENAI_API_KEY }}" --secret
          pulumi up --yes

  # DNS Configuration
  configure-dns:
    name: üåê Configure DNS
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && (needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure DNS records
        env:
          DNSIMPLE_API_KEY: ${{ secrets.DNSIMPLE_API_KEY }}
          DNSIMPLE_ACCOUNT_ID: ${{ secrets.DNSIMPLE_ACCOUNT_ID }}
        run: |
          chmod +x deployment/configure-dns.sh
          ./deployment/configure-dns.sh

  # Health Checks and Monitoring
  health-checks:
    name: üè• Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, configure-dns]
    if: always()
    steps:
      - name: Frontend health check
        run: |
          echo "Checking frontend health..."
          curl -f https://www.sophia-intel.ai || curl -f https://dnztojfz.manus.space
          echo "Frontend is healthy"

      - name: Backend health check
        run: |
          echo "Checking backend health..."
          curl -f https://api.sophia-intel.ai/health || echo "Backend health check pending deployment"

      - name: Performance monitoring
        run: |
          echo "Running performance checks..."
          # Add performance monitoring logic here
          echo "Performance monitoring completed"

  # Deployment Summary
  deployment-summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-infrastructure, configure-dns, health-checks]
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "üéâ SOPHIA Intel Deployment Summary"
          echo "=================================="
          echo ""
          echo "Backend: ${{ needs.deploy-backend.result }}"
          echo "Frontend: ${{ needs.deploy-frontend.result }}"
          echo "Infrastructure: ${{ needs.deploy-infrastructure.result }}"
          echo "DNS: ${{ needs.configure-dns.result }}"
          echo "Health Checks: ${{ needs.health-checks.result }}"
          echo ""
          echo "üîó Production URLs:"
          echo "Dashboard: https://www.sophia-intel.ai"
          echo "API: https://api.sophia-intel.ai"
          echo ""
          echo "Deployment completed at: $(date)"

      - name: Notify deployment status
        if: failure()
        run: |
          echo "‚ùå Deployment failed. Check logs for details."
          exit 1

