name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  deps_uv_lock:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Check uv version
        run: uv --version

      - name: Sync dependencies with frozen lock
        run: uv sync --frozen

      - name: Test import sanity
        run: |
          source .venv/bin/activate
          python -c "import loguru, qdrant_client, fastapi, uvicorn, httpx; print('✅ Core imports successful')"

      - name: Generate uv.lock checksum
        run: sha256sum uv.lock > uv.lock.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: uv-sync-artifacts
          path: |
            uv.lock.sha256

  hygiene_sweep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for forbidden patterns
        run: |
          echo "Checking for Roo, Portkey, and backup artifacts..."
          if git grep -niE 'roo|portkey|backup' . | grep -v '.venv' | grep -v 'node_modules' | grep -v '.github/workflows'; then
            echo "❌ Found forbidden patterns in codebase"
            exit 1
          else
            echo "✅ No forbidden patterns found"
          fi

      - name: Check for .venv directory
        run: |
          if [ -d ".venv" ]; then
            echo "❌ .venv directory should not be committed"
            exit 1
          fi

      - name: Upload hygiene log
        uses: actions/upload-artifact@v4
        with:
          name: hygiene-artifacts
          path: |
            hygiene.log
        if: always()

  router_allowlist_test:
    runs-on: ubuntu-latest
    needs: [deps_uv_lock]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --frozen

      - name: Test router allowlist enforcement
        run: |
          source .venv/bin/activate
          python scripts/test_router_allowlist.py

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: router-allowlist-test-results
          path: |
            router_allowlist_test.log
        if: always()

  secrets_presence_gate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required secrets presence
        run: |
          req=(OPENROUTER_API_KEY QDRANT_API_KEY QDRANT_URL NEON_DATABASE_URL REDIS_URL)
          missing=0
          for k in "${req[@]}"; do
            if [ -z "${!k}" ]; then
              echo "MISSING $k"
              missing=1
            else
              echo "PRESENT $k"
            fi
          done
          exit $missing
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          QDRANT_API_KEY:     ${{ secrets.QDRANT_API_KEY }}
          QDRANT_URL:         ${{ secrets.QDRANT_URL }}
          NEON_DATABASE_URL:  ${{ secrets.NEON_DATABASE_URL }}
          REDIS_URL:          ${{ secrets.REDIS_URL }}

      - name: Upload secrets status
        uses: actions/upload-artifact@v4
        with:
          name: secrets-status
          path: secrets_status.json

  connectivity_smoke:
    needs: [secrets_presence_gate, deps_uv_lock, hygiene_sweep, router_allowlist_test]
    runs-on: ubuntu-latest
    env:
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      QDRANT_API_KEY:     ${{ secrets.QDRANT_API_KEY }}
      QDRANT_URL:         ${{ secrets.QDRANT_URL }}
      NEON_DATABASE_URL:  ${{ secrets.NEON_DATABASE_URL }}
      REDIS_URL:          ${{ secrets.REDIS_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python & uv
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
        
      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        
      - name: Sync deps
        run: uv sync --frozen
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client redis-tools
          
      - name: OpenRouter check
        run: |
          source .venv/bin/activate
          python scripts/smoke/openrouter_check.py | tee openrouter.log
          
      - name: Qdrant check
        run: |
          source .venv/bin/activate
          python scripts/smoke/qdrant_check.py | tee qdrant.log
          
      - name: Neon check
        run: bash scripts/smoke/neon_check.sh | tee neon.log
        
      - name: Redis check
        run: bash scripts/smoke/redis_check.sh | tee redis.log
        
      - name: Upload connectivity smoke logs
        uses: actions/upload-artifact@v4
        with:
          name: connectivity-smoke-logs
          path: |
            openrouter.log
            qdrant.log
            neon.log
            redis.log

  lint:
    runs-on: ubuntu-latest
    needs: [deps_uv_lock, hygiene_sweep]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Restore uv cache
        uses: actions/cache@v3
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}

      - name: Install dependencies
        run: uv sync --frozen --dev

      - name: Code compilation check
        run: python -m compileall . -x 'frontend/|node_modules/'

      - name: Format check
        run: black --check --diff .

      - name: Type checking (optional)
        run: |
          if command -v mypy &> /dev/null; then
            echo "Running mypy type checking"
            mypy . --ignore-missing-imports || true
          else
            echo "Mypy not installed, skipping type checking"
          fi

  test:
    runs-on: ubuntu-latest
    needs: [deps_uv_lock, lint]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: sophia_test
          POSTGRES_USER: sophia
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --frozen --dev

      - name: Create test data directory
        run: mkdir -p data

      - name: Run tests
        env:
          # Test environment variables
          ENVIRONMENT: test
          DATABASE_URL: postgresql+asyncpg://sophia:testpass@localhost:5432/sophia_test
          REDIS_URL: redis://localhost:6379/1
          QDRANT_URL: http://localhost:6333
          
          # Mock API keys for testing
          OPENROUTER_API_KEY: test-openrouter-key
          LAMBDA_CLOUD_API_KEY: test-lambda-key
          
          # Test secrets
          SECRET_KEY: test-secret-key
          ENCRYPTION_KEY: test-encryption-key-32-chars-long
          JWT_SECRET: test-jwt-secret
          API_SALT: test-api-salt
          
          # Service endpoints (will be mocked in tests)
          SOPHIA_API_ENDPOINT: http://localhost:8000
          SOPHIA_MCP_ENDPOINT: http://localhost:8001
          SOPHIA_FRONTEND_ENDPOINT: http://localhost:3000
          
          # Agent configuration
          AGNO_STORAGE_DB: data/test_agents.db
        run: |
          # Run pytest with coverage
          pytest tests/ -v --tb=short --durations=10
          
          # Run specific health checks
          python -m pytest tests/test_health.py -v

  security:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Add uv to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install security tools
        run: |
          uv pip install --system bandit safety

      - name: Run security check
        run: |
          # Check for security issues in code
          bandit -r . -x tests/,frontend/ -f json -o bandit-report.json || true
          
          # Check for known security vulnerabilities in dependencies
          safety check --json --output safety-report.json || true
          
          echo "Security scan completed. Review reports if any issues found."

  build-status:
    runs-on: ubuntu-latest
    needs: [deps_uv_lock, hygiene_sweep, router_allowlist_test, secrets_presence_gate, connectivity_smoke, lint, test, security]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.deps_uv_lock.result }}" == "success" && "${{ needs.hygiene_sweep.result }}" == "success" && "${{ needs.router_allowlist_test.result }}" == "success" && "${{ needs.connectivity_smoke.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed:"
            echo "Dependencies: ${{ needs.deps_uv_lock.result }}"
            echo "Hygiene: ${{ needs.hygiene_sweep.result }}"
            echo "Router Allowlist: ${{ needs.router_allowlist_test.result }}"
            echo "Secrets: ${{ needs.secrets_presence_gate.result }}"
            echo "Connectivity: ${{ needs.connectivity_smoke.result }}"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Test: ${{ needs.test.result }}"
            echo "Security: ${{ needs.security.result }}"
            exit 1
          fi

