name: üö® SOPHIA Intel Rescue Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_rebuild:
        description: 'Force rebuild images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  rescue-deploy:
    name: üö® Rescue Deploy SOPHIA Intel
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîê Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üèóÔ∏è Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: ‚öôÔ∏è Set up Kubernetes config
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config
        
    - name: üîß Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: üîë Create/Update Kubernetes secrets
      run: |
        # Delete existing secret if it exists
        kubectl -n sophia-intel delete secret sophia-secrets 2>/dev/null || true
        
        # Create new secret with all required keys
        kubectl -n sophia-intel create secret generic sophia-secrets \
          --from-literal=OPENROUTER_API_KEY='${{ secrets.OPENROUTER_API_KEY }}' \
          --from-literal=QDRANT_API_KEY='${{ secrets.QDRANT_API_KEY }}' \
          --from-literal=GITHUB_PAT='${{ secrets.GITHUB_PAT }}' \
          --from-literal=BRIGHTDATA_API_KEY='${{ secrets.BRIGHTDATA_API_KEY }}' \
          --from-literal=POSTGRES_URL='${{ secrets.POSTGRES_URL }}' \
          --from-literal=ELEVENLABS_API_KEY='${{ secrets.ELEVENLABS_API_KEY }}' \
          --from-literal=OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
          --from-literal=LAMBDA_API_KEY='${{ secrets.LAMBDA_API_KEY }}'
          
    - name: üöÄ Deploy SOPHIA Intel with Helm (Atomic)
      run: |
        helm upgrade --install sophia ./charts/sophia \
          --namespace sophia-intel \
          --create-namespace \
          -f charts/sophia/values-prod.yaml \
          --set image.tag=${{ github.sha }} \
          --set ingress.host=${{ secrets.INGRESS_HOST || '104.171.202.107' }} \
          --atomic \
          --timeout 10m \
          --wait
          
    - name: ‚è≥ Wait for pods to be ready
      run: |
        echo "Waiting for all pods to be ready..."
        kubectl -n sophia-intel wait --for=condition=ready pod --all --timeout=300s
        
    - name: üìä Check deployment status
      run: |
        echo "=== Pod Status ==="
        kubectl -n sophia-intel get pods -o wide
        echo ""
        echo "=== Service Status ==="
        kubectl -n sophia-intel get svc
        echo ""
        echo "=== Ingress Status ==="
        kubectl -n sophia-intel get ingress
        
    - name: üß™ Smoke Tests - Health Check
      run: |
        INGRESS_HOST="${{ secrets.INGRESS_HOST || '104.171.202.107' }}"
        echo "Testing health endpoint..."
        curl -fsS "http://$INGRESS_HOST/health" | jq .
        
    - name: üß™ Smoke Tests - Orchestration Endpoint
      run: |
        INGRESS_HOST="${{ secrets.INGRESS_HOST || '104.171.202.107' }}"
        echo "Testing orchestration endpoint (must NOT be 404)..."
        curl -fsS -X POST "http://$INGRESS_HOST/api/orchestration" \
          -H "Content-Type: application/json" \
          -d '{"request_type":"health","payload":{}}' | jq .
          
    - name: üß™ Smoke Tests - Voice API Health
      run: |
        INGRESS_HOST="${{ secrets.INGRESS_HOST || '104.171.202.107' }}"
        echo "Testing voice API health (must NOT be 404)..."
        curl -fsS "http://$INGRESS_HOST/api/speech/health" | jq .
        
    - name: üß™ Smoke Tests - Voice API Voices
      run: |
        INGRESS_HOST="${{ secrets.INGRESS_HOST || '104.171.202.107' }}"
        echo "Testing voice API voices (must NOT be 404)..."
        curl -fsS "http://$INGRESS_HOST/api/speech/voices" | jq .
        
    - name: ‚úÖ Deployment Success
      run: |
        echo "üéâ SOPHIA Intel rescue deployment completed successfully!"
        echo "‚úÖ All pods are ready"
        echo "‚úÖ Health endpoint: 200 OK"
        echo "‚úÖ Orchestration endpoint: 200 OK (no more 404s)"
        echo "‚úÖ Voice API endpoints: 200 OK (no more 404s)"
        echo ""
        echo "üåê Access SOPHIA Intel at: http://${{ secrets.INGRESS_HOST || '104.171.202.107' }}"
        
    - name: üö® Deployment Failed - Rollback Info
      if: failure()
      run: |
        echo "‚ùå Deployment failed - Helm atomic rollback should have occurred"
        echo "Checking current state..."
        kubectl -n sophia-intel get pods
        kubectl -n sophia-intel get events --sort-by=.lastTimestamp | tail -20
        echo ""
        echo "Check logs with: kubectl -n sophia-intel logs -l app=sophia-api"

