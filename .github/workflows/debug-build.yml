name: Debug Build Issue

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/debug-build.yml' ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  debug-build:
    name: Debug Build Process
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Debug - Show environment
        run: |
          echo "🔍 Environment Debug Information"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Working directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo "🔍 Looking for package.json files:"
          find . -name "package.json" -not -path "*/node_modules/*" | head -10

      - name: Debug - Test frontend detection
        run: |
          echo "🔍 Testing frontend detection logic..."
          
          FE_DIR=""
          for pkg in $(find . -name "package.json" -not -path "*/node_modules/*"); do
            echo "Checking: $pkg"
            if grep -q '"build"' "$pkg"; then
              echo "  ✅ Has build script"
              if ! grep -q '"@pulumi/' "$pkg"; then
                echo "  ✅ Not Pulumi package"
                FE_DIR=$(dirname "$pkg")
                echo "  🎯 Selected as frontend: $FE_DIR"
                break
              else
                echo "  ❌ Is Pulumi package, skipping"
              fi
            else
              echo "  ❌ No build script"
            fi
          done
          
          if [ -z "$FE_DIR" ]; then
            FE_DIR="./apps/dashboard"
            echo "🔄 Fallback to default: $FE_DIR"
          fi
          
          echo "📋 Final frontend directory: $FE_DIR"
          
          if [ -d "$FE_DIR" ]; then
            echo "✅ Directory exists"
            echo "📋 Contents:"
            ls -la "$FE_DIR"
            
            if [ -f "$FE_DIR/package.json" ]; then
              echo "✅ package.json exists"
              echo "📋 Build script:"
              grep -A 3 -B 3 '"build"' "$FE_DIR/package.json" || echo "❌ No build script found"
            else
              echo "❌ No package.json in directory"
            fi
          else
            echo "❌ Directory does not exist"
          fi

      - name: Debug - Test dependency installation
        run: |
          echo "🔍 Testing dependency installation..."
          
          FE_DIR="./apps/dashboard"
          
          if [ -d "$FE_DIR" ]; then
            cd "$FE_DIR"
            echo "📋 Current directory: $(pwd)"
            
            echo "🔍 Checking for lockfile:"
            if [ -f "package-lock.json" ]; then
              echo "✅ package-lock.json exists"
              echo "🔧 Running: npm ci --legacy-peer-deps"
              npm ci --legacy-peer-deps
            else
              echo "❌ No package-lock.json, using npm install"
              echo "🔧 Running: npm install --legacy-peer-deps"
              npm install --legacy-peer-deps
            fi
            
            INSTALL_EXIT_CODE=$?
            echo "📊 Install exit code: $INSTALL_EXIT_CODE"
            
            if [ $INSTALL_EXIT_CODE -eq 0 ]; then
              echo "✅ Dependencies installed successfully"
              
              echo "🔍 Checking node_modules:"
              if [ -d "node_modules" ]; then
                echo "✅ node_modules directory exists"
                echo "📊 Size: $(du -sh node_modules)"
              else
                echo "❌ node_modules directory missing"
              fi
            else
              echo "❌ Dependency installation failed"
              exit 1
            fi
          else
            echo "❌ Frontend directory not found: $FE_DIR"
            exit 1
          fi

      - name: Debug - Test build process
        run: |
          echo "🔍 Testing build process..."
          
          FE_DIR="./apps/dashboard"
          
          if [ -d "$FE_DIR" ]; then
            cd "$FE_DIR"
            echo "📋 Current directory: $(pwd)"
            
            echo "🔍 Setting environment variables:"
            export VITE_API_URL="https://api.sophia-intel.ai"
            export NODE_ENV="production"
            
            echo "  VITE_API_URL: $VITE_API_URL"
            echo "  NODE_ENV: $NODE_ENV"
            
            echo "🔧 Running: npm run build"
            npm run build
            
            BUILD_EXIT_CODE=$?
            echo "📊 Build exit code: $BUILD_EXIT_CODE"
            
            if [ $BUILD_EXIT_CODE -eq 0 ]; then
              echo "✅ Build completed successfully"
              
              echo "🔍 Checking build output:"
              if [ -d "dist" ]; then
                echo "✅ dist directory exists"
                echo "📋 Contents:"
                ls -la dist/
                echo "📊 Size: $(du -sh dist/)"
              else
                echo "❌ dist directory missing"
              fi
            else
              echo "❌ Build failed"
              exit 1
            fi
          else
            echo "❌ Frontend directory not found: $FE_DIR"
            exit 1
          fi

      - name: Debug - Summary
        if: always()
        run: |
          echo "🎯 Debug Summary"
          echo "==============="
          echo "This debug workflow tests each step of the build process individually"
          echo "to identify exactly where the failure occurs in the main workflow."
          echo ""
          echo "If this debug workflow passes, the issue is likely in the main workflow configuration."
          echo "If this debug workflow fails, we can see exactly which step is problematic."

