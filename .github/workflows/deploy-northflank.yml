name: Deploy SOPHIA Intel to Northflank

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  VITE_API_URL: https://api.sophia-intel.ai

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Detect FE/BE paths
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          echo "üîç Detecting frontend/backend..."

          FE_DIR=""
          while IFS= read -r pkg; do
            if grep -q '"build"' "$pkg" && ! grep -q '"@pulumi/' "$pkg"; then
              FE_DIR="$(dirname "$pkg")"; break
            fi
          done < <(git ls-files '**/package.json' | grep -v node_modules || true)

          # Fallback to conventional path if detection failed
          if [ -z "${FE_DIR}" ] && [ -d apps/dashboard ]; then FE_DIR="apps/dashboard"; fi
          echo "FE_DIR=$FE_DIR" >> "$GITHUB_OUTPUT"
          echo "FE_DIR: ${FE_DIR:-<none>}"

          BE_REQ=""
          if [ -f backend/requirements.txt ]; then
            BE_REQ="backend/requirements.txt"
          elif [ -f requirements.txt ]; then
            BE_REQ="requirements.txt"
          fi
          echo "BE_REQ=$BE_REQ" >> "$GITHUB_OUTPUT"
          echo "BE_REQ: ${BE_REQ:-<none>}"

      - name: Clear npm cache
        if: ${{ steps.detect.outputs.FE_DIR != '' }}
        run: |
          npm cache clean --force
          npm cache verify

      - name: Install frontend dependencies
        if: ${{ steps.detect.outputs.FE_DIR != '' }}
        working-directory: ${{ steps.detect.outputs.FE_DIR }}
        run: |
          rm -rf node_modules
          if [ -f package-lock.json ]; then
            npm ci --legacy-peer-deps --no-fund --no-audit
          else
            npm install --legacy-peer-deps --no-fund --no-audit
          fi

      - name: Build frontend
        if: ${{ steps.detect.outputs.FE_DIR != '' }}
        working-directory: ${{ steps.detect.outputs.FE_DIR }}
        env:
          NODE_ENV: production
          CI: false
          NPM_CONFIG_FUND: false
          NPM_CONFIG_AUDIT: false
          NODE_OPTIONS: '--max-old-space-size=4096'
          VITE_API_URL: ${{ env.VITE_API_URL }}
        run: |
          echo "üì¶ Building frontend in $(pwd)"
          npm run build --verbose
          test -d dist || (echo "‚ùå No dist/ output"; exit 1)
          du -sh dist || true

      - name: Install backend dependencies (if present)
        if: ${{ steps.detect.outputs.BE_REQ != '' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r "${{ steps.detect.outputs.BE_REQ }}"

      - name: Backend import smoke test (optional)
        if: ${{ steps.detect.outputs.BE_REQ != '' }}
        run: |
          python - <<'PY'
import sys
print("‚úÖ Python:", sys.version)
try:
  import importlib; importlib.import_module("backend.simple_main")
  print("‚úÖ backend.simple_main import OK")
except Exception as e:
  print("‚ÑπÔ∏è backend.simple_main import skipped/failed:", e)
PY

  deploy-to-northflank:
    name: Deploy to Northflank
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ needs.build-and-test.result == 'success' && github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure Northflank token present
        shell: bash
        run: |
          if [ -z "${{ secrets.NORTHFLANK_API_TOKEN }}" ]; then
            echo "‚ùå Missing secret: NORTHFLANK_API_TOKEN"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Northflank CLI
        run: npm i -g @northflank/cli

      - name: Deploy services via script (preferred)
        env:
          NORTHFLANK_API_TOKEN: ${{ secrets.NORTHFLANK_API_TOKEN }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
          DASHBOARD_API_TOKEN: ${{ secrets.DASHBOARD_API_TOKEN }}
          VITE_API_URL: ${{ env.VITE_API_URL }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -x scripts/deploy_northflank.sh ]; then
            echo "üöÄ Running scripts/deploy_northflank.sh"
            bash scripts/deploy_northflank.sh
          else
            echo "‚ö†Ô∏è scripts/deploy_northflank.sh not found; using CLI placeholder"
            nf --version || true
            # TODO: replace with your project-specific nf apply commands
            echo "‚úÖ CLI is installed; skipping example apply"
          fi

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy-to-northflank
    if: ${{ needs.deploy-to-northflank.result == 'success' }}

    steps:
      - name: Wait and probe endpoints (with retries)
        shell: bash
        env:
          API_URL: https://api.sophia-intel.ai/health
          DASHBOARD_URL: https://www.sophia-intel.ai
        run: |
          set -euo pipefail
          tries=12
          delay=10
          ok_api=0
          ok_dash=0

          echo "‚è≥ Waiting for services (up to $((tries*delay))s)..."
          for i in $(seq 1 $tries); do
            API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || echo "000")
            DASH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DASHBOARD_URL" || echo "000")
            echo "Attempt $i: API=$API_STATUS, DASHBOARD=$DASH_STATUS"

            if [ "$API_STATUS" = "200" ]; then ok_api=1; fi
            if [ "$DASH_STATUS" = "200" ]; then ok_dash=1; fi

            if [ $ok_api -eq 1 ] && [ $ok_dash -eq 1 ]; then
              echo "üéâ SOPHIA Intel is live and healthy!"
              echo "‚úÖ Dashboard: $DASHBOARD_URL"
              echo "‚úÖ API: $API_URL"
              exit 0
            fi
            sleep $delay
          done

          echo "‚ö†Ô∏è Services not healthy after $((tries*delay))s."
          echo "üîé Last API body (if any):"
          curl -s "$API_URL" || true
          echo
          echo "üîó Check Northflank project dashboard for rollout status."
          exit 1

