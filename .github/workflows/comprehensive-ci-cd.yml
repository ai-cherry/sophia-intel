name: üöÄ SOPHIA Intel Comprehensive CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run_performance_tests:
        description: 'Run Performance Tests'
        required: false
        default: false
        type: boolean
      run_security_tests:
        description: 'Run Security Tests'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  code-quality:
    name: üîç Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          find . -name "requirements*.txt" -exec pip install -r {} \;

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run isort import sorting check
        run: isort --check-only --diff .

      - name: Run flake8 linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run mypy type checking
        run: mypy backend/ --ignore-missing-imports --no-strict-optional

      - name: Run Bandit security linting
        run: bandit -r backend/ -f json -o bandit-report.json || true

      - name: Run Safety dependency check
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-mock pytest-xdist
          find . -name "requirements*.txt" -exec pip install -r {} \;

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            --cov=backend \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=junit-unit-${{ matrix.python-version }}.xml \
            -v \
            --tb=short \
            -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit-tests
          name: codecov-unit-${{ matrix.python-version }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.python-version }}
          path: |
            junit-unit-${{ matrix.python-version }}.xml
            htmlcov/

  # Integration Tests
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov pytest-mock
          find . -name "requirements*.txt" -exec pip install -r {} \;

      - name: Wait for services
        run: |
          sleep 10
          redis-cli -h localhost -p 6379 ping
          pg_isready -h localhost -p 5432 -U testuser

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
        run: |
          pytest tests/integration/ \
            --cov=backend \
            --cov-report=xml \
            --junit-xml=junit-integration.xml \
            -v \
            --tb=short

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            junit-integration.xml
            coverage.xml

  # End-to-End Tests
  e2e-tests:
    name: üé≠ End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio playwright
          find . -name "requirements*.txt" -exec pip install -r {} \;
          playwright install

      - name: Start application
        run: |
          # Start the application in background
          python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
          sleep 30

      - name: Run E2E tests
        env:
          BASE_URL: http://localhost:8000
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
        run: |
          pytest tests/e2e/ \
            --junit-xml=junit-e2e.xml \
            -v \
            --tb=short

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            junit-e2e.xml
            tests/e2e/screenshots/

  # Performance Tests
  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event.inputs.run_performance_tests == 'true' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-benchmark locust
          find . -name "requirements*.txt" -exec pip install -r {} \;

      - name: Run performance tests
        run: |
          pytest tests/performance/ \
            --benchmark-json=benchmark-results.json \
            --junit-xml=junit-performance.xml \
            -v

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            benchmark-results.json
            junit-performance.xml

  # Security Tests
  security-tests:
    name: üîí Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event.inputs.run_security_tests == 'true' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio
          find . -name "requirements*.txt" -exec pip install -r {} \;

      - name: Run security tests
        run: |
          pytest tests/security/ \
            --junit-xml=junit-security.xml \
            -v

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: junit-security.xml

  # Build and Push Docker Images
  build-and-push:
    name: üê≥ Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway Staging
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_STAGING_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service sophia-intel-staging

      - name: Run post-deployment health checks
        run: |
          sleep 60
          curl -f https://staging.sophia-intel.ai/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Staging deployment successful"
          # Add Slack/Discord notification here

  # Deploy to Production
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Deploy to Railway Production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway up --service sophia-intel-production

      - name: Run post-deployment health checks
        run: |
          sleep 60
          curl -f https://api.sophia-intel.ai/health || exit 1
          curl -f https://dashboard.sophia-intel.ai/health || exit 1

      - name: Update Lambda Labs servers
        env:
          LAMBDA_API_KEY: ${{ secrets.LAMBDA_API_KEY }}
        run: |
          # Update Lambda Labs inference servers with latest code
          python scripts/update_lambda_servers.py

      - name: Run production smoke tests
        run: |
          pytest tests/smoke/ \
            --base-url=https://api.sophia-intel.ai \
            -v

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment successful"
          # Add comprehensive notification here

  # Rollback (Manual Trigger)
  rollback:
    name: üîÑ Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deployment_environment == 'rollback'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Rollback Railway deployment
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_PRODUCTION_TOKEN }}
        run: |
          railway login --token $RAILWAY_TOKEN
          railway rollback --service sophia-intel-production

      - name: Verify rollback
        run: |
          sleep 60
          curl -f https://api.sophia-intel.ai/health || exit 1

  # Cleanup
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old Docker images
        run: |
          # Clean up old images from registry
          echo "Cleaning up old Docker images..."

      - name: Generate deployment report
        run: |
          echo "## üìä Deployment Report" > deployment-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Timestamp**: $(date -u)" >> deployment-report.md
          echo "- **Status**: ${{ job.status }}" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.md

