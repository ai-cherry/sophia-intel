name: Deploy to Railway Production

on:
  push:
    branches: [main]
    paths:
      - 'apps/dashboard/**'
      - 'backend/**'
      - 'railway.toml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  test:
    name: Run Tests Before Deploy
    uses: ./.github/workflows/test.yml

  deploy-backend:
    name: Deploy Backend API
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Authenticate with Railway
        run: |
          echo "${{ secrets.RAILWAY_TOKEN }}" | railway login --token

      - name: Deploy Backend to Railway
        working-directory: backend
        run: |
          echo "🚀 Deploying SOPHIA Intel Backend API..."
          
          # Link to existing project or create new one
          railway link sophia-intel-api || railway project create sophia-intel-api
          
          # Set environment variables
          railway variables set OPENROUTER_API_KEY="${{ secrets.OPENROUTER_API_KEY }}"
          railway variables set PYTHON_ENV="production"
          railway variables set LOG_LEVEL="info"
          railway variables set CORS_ORIGINS="https://www.sophia-intel.ai,https://api.sophia-intel.ai"
          
          # Deploy the service
          railway up --detach
          
          echo "✅ Backend deployment initiated"

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          sleep 120  # Wait 2 minutes for deployment

      - name: Get deployment URL
        id: backend-url
        run: |
          URL=$(railway domain 2>/dev/null || echo "deployment-pending")
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Backend URL: $URL"

      - name: Health check
        run: |
          URL="${{ steps.backend-url.outputs.url }}"
          if [[ "$URL" != "deployment-pending" ]]; then
            echo "🏥 Running health check on $URL..."
            for i in {1..10}; do
              if curl -f "$URL/health" --connect-timeout 10; then
                echo "✅ Backend health check passed"
                break
              else
                echo "⏳ Health check attempt $i/10 failed, retrying..."
                sleep 30
              fi
            done
          else
            echo "⚠️ Deployment URL not available yet"
          fi

  deploy-frontend:
    name: Deploy Frontend Dashboard
    runs-on: ubuntu-latest
    needs: [test, deploy-backend]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH

      - name: Authenticate with Railway
        run: |
          echo "${{ secrets.RAILWAY_TOKEN }}" | railway login --token

      - name: Deploy Frontend to Railway
        working-directory: apps/dashboard
        run: |
          echo "🚀 Deploying SOPHIA Intel Frontend Dashboard..."
          
          # Link to existing project or create new one
          railway link sophia-intel-dashboard || railway project create sophia-intel-dashboard
          
          # Set environment variables
          railway variables set NODE_ENV="production"
          railway variables set VITE_API_URL="https://api.sophia-intel.ai"
          
          # Deploy the service
          railway up --detach
          
          echo "✅ Frontend deployment initiated"

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          sleep 120  # Wait 2 minutes for deployment

      - name: Get deployment URL
        id: frontend-url
        run: |
          URL=$(railway domain 2>/dev/null || echo "deployment-pending")
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $URL"

      - name: Health check
        run: |
          URL="${{ steps.frontend-url.outputs.url }}"
          if [[ "$URL" != "deployment-pending" ]]; then
            echo "🏥 Running health check on $URL..."
            for i in {1..10}; do
              if curl -f "$URL" --connect-timeout 10; then
                echo "✅ Frontend health check passed"
                break
              else
                echo "⏳ Health check attempt $i/10 failed, retrying..."
                sleep 30
              fi
            done
          else
            echo "⚠️ Deployment URL not available yet"
          fi

  configure-domains:
    name: Configure Custom Domains
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
    
    steps:
      - name: Configure DNS with DNSimple
        run: |
          echo "🌐 Configuring custom domains..."
          
          # Get deployment URLs
          BACKEND_URL="${{ needs.deploy-backend.outputs.url }}"
          FRONTEND_URL="${{ needs.deploy-frontend.outputs.url }}"
          
          if [[ -n "${{ secrets.DNSIMPLE_API_KEY }}" ]]; then
            # Configure DNS records via DNSimple API
            echo "Setting up DNS records for sophia-intel.ai..."
            
            # This would require the actual DNSimple account ID
            # For now, just log the intended configuration
            echo "Would configure:"
            echo "  api.sophia-intel.ai -> $BACKEND_URL"
            echo "  www.sophia-intel.ai -> $FRONTEND_URL"
          else
            echo "⚠️ DNSimple API key not configured, skipping DNS setup"
          fi

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, configure-domains]
    if: always()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "# 🚀 SOPHIA Intel Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Dashboard**: ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Domain Configuration**: ${{ needs.configure-domains.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "## ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "SOPHIA Intel is now live and accessible:" >> $GITHUB_STEP_SUMMARY
            echo "- **API**: https://api.sophia-intel.ai" >> $GITHUB_STEP_SUMMARY
            echo "- **Dashboard**: https://www.sophia-intel.ai" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Deployment Issues Detected" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

